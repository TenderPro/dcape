  # ------------------------------------------------------------------------------
  drone-server:
    image: drone/drone:0.7
    restart: always
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
#      - ./drones:/drone
    labels:
      - "traefik.enable=true"
      - "traefik.port=8000"
      - "traefik.frontend.rule=Host:${DRONE_HOST}"

    environment:
      - DRONE_OPEN=true
      - DRONE_HOST=${DRONE_HOST}

      - DRONE_GITEA=true
      - DRONE_GITEA_URL=${DRONE_GIT_PROTO}://${DRONE_GIT_HOST}/

       # not required auth for public repos
      - DRONE_GITEA_PRIVATE_MODE=true
#      - DRONE_GITEA_PRIVATE_MODE=false

      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_ADMIN=${DRONE_ADMIN}

      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgresql://drone:${DRONE_DB_PASS}@db:5432/drone?sslmode=disable

  drone:
    image: drone/drone:0.7
    command: agent
    restart: always
    depends_on:
      - drone-server
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /etc/timezone:/etc/timezone:ro
#      - ./dronea:/drone
    labels:
      - "traefik.enable=false"
    environment:
      - TZ=${TZ}
      - DRONE_HOST=drone-server
      - DRONE_SERVER=ws://drone-server:8000/ws/broker
      - DRONE_SECRET=${DRONE_SECRET}
      - DRONE_GITEA=true
      - DRONE_GITEA_URL=${DRONE_GIT_PROTO}://${DRONE_GIT_HOST}/
      - DRONE_GITEA_PRIVATE_MODE=true

      - DRONE_DATABASE_DRIVER=postgres
      - DRONE_DATABASE_DATASOURCE=postgresql://drone:${DRONE_DB_PASS}@db:5432/drone?sslmode=disable

