# dcape Makefile
SHELL             = /bin/bash
CFG               = .env
CFG_BAK          ?= $(CFG).bak
DCINC             = docker-compose.inc.yml
DCFILES           = $(shell find apps/ -name $(DCINC) -print | sort)
# Config vars described below in section `define CONFIG_DEF`
GITEA            ?= no
DNS              ?= no
ACME             ?= no
DCAPE_TAG        ?= dcape
DCAPE_NET        ?= $(DCAPE_TAG)
DCAPE_DOMAIN     ?= dev.lan
APPS             ?= traefik narra enfist drone portainer
TZ               ?= $(shell cat /etc/timezone)
PG_IMAGE         ?= postgres:13.1-alpine
PG_DB_PASS       ?= $(shell < /dev/urandom tr -dc A-Za-z0-9 2>/dev/null | head -c14; echo)
PG_ENCODING      ?= en_US.UTF-8
PG_PORT_LOCAL    ?= 5433
PG_SOURCE_SUFFIX ?=
PG_SHM_SIZE      ?= 64mb
DCAPE_SUBNET     ?= 100.127.0.0/24
DCAPE_ROOT_VAR   ?= $(PWD)/var
DC_VER           ?= 1.27.4
ENFIST_URL       ?= http://enfist:8080/rpc
APPS_SYS         ?= db
PG_CONTAINER     ?= $(DCAPE_TAG)_db_1

# ------------------------------------------------------------------------------

define CONFIG_DEF
# dcape config file, generated by make init

# ==============================================================================
# DCAPE: general config

# Enable gitea on this host: [no]|yes
# if "no" - use external gitea 
GITEA=$(GITEA)

# Enable powerdns on this host: [no]|yes|wild
# yes - just setup and start
# wild - use as wildcard domain nameserver
DNS=$(DNS)

# Enable Let's Encrypt certificates: [no]|http|wild
# http - use individual host cert
# wild - use wildcard domain for DCAPE_DOMAIN
ACME=$(ACME)

# container name prefix
DCAPE_TAG=$(DCAPE_TAG)

# dcape containers hostname domain
DCAPE_DOMAIN=$(DCAPE_DOMAIN)

# Gitea host for auth
AUTH_SERVER=$(AUTH_SERVER)

# ------------------------------------------------------------------------------
# DCAPE: internal config

# docker network name
DCAPE_NET=$(DCAPE_NET)

# container(s) required for up in any case
# used in make only
APPS="$(shell echo $(APPS))"

# create db cluster with this timezone
# (also used by containers)
TZ=$(TZ)

# Postgresql Database image
PG_IMAGE=$(PG_IMAGE)
# Postgresql Database superuser password
PG_DB_PASS=$(PG_DB_PASS)
# Postgresql Database encoding
PG_ENCODING=$(PG_ENCODING)
# port on localhost postgresql listen on
PG_PORT_LOCAL=$(PG_PORT_LOCAL)
# Dump name suffix to load on db-create
PG_SOURCE_SUFFIX=$(PG_SOURCE_SUFFIX)
# shared memory
PG_SHM_SIZE=$(PG_SHM_SIZE)

# docker network subnet
DCAPE_SUBNET=$(DCAPE_SUBNET)

# Deployment persistent storage
DCAPE_ROOT_VAR=$(DCAPE_ROOT_VAR)

# http if ACME=no, https otherwise
DCAPE_SCHEME=$(DCAPE_SCHEME)

# Docker-compose image tag
DC_VER=$(DC_VER)

endef
export CONFIG_DEF

# ------------------------------------------------------------------------------

# if exists - load old values
-include $(CFG_BAK)
export

-include $(CFG)
export

.PHONY: init apply up reup down dc db-create db-drop env-get env-set help

all: help

# ------------------------------------------------------------------------------

include apps/*/Makefile

ifneq ($(DNS),no)
  APPS += powerdns
endif

ifeq ($(ACME),no)
  DCAPE_SCHEME ?= http
else
  DCAPE_SCHEME ?= https
endif

ifneq ($(GITEA),no)
  APPS += gitea
  AUTH_SERVER ?= $(DCAPE_SCHEME)://$(GITEA_HOST)
else 
  ifndef AUTH_SERVER
    $(error Variable AUTH_SERVER must be defined if GITEA=no)
  endif
endif


# ------------------------------------------------------------------------------

## Initially create $(CFG) file with defaults
init: var
	@echo "*** $@ $(APPS) ***"
	@[ -f $(CFG) ] && { echo "$(CFG) already exists. Skipping" ; exit 1 ; } || true
	@echo "$$CONFIG_DEF" > $(CFG)
	@for f in $(shell echo $(APPS)) ; do echo $$f ; $(MAKE) -s $${f}-init ; done

var:
	@mkdir -p var

## Apply config to app files & db
apply:
	@echo "*** $@ $(APPS) ***"
	@$(MAKE) -s dc CMD="up -d $(APPS_SYS)" || echo ""
	@for f in $(shell echo $(APPS)) ; do $(MAKE) -s $${f}-apply ; done
	docker tag docker/compose:$(DC_VER) docker/compose:latest

# build file from app templates
docker-compose.yml: $(DCINC) $(DCFILES)
	@echo "*** $@ ***"
	@echo "# WARNING! This file was generated by make. DO NOT EDIT" > $@
	@cat $(DCINC) >> $@
	@for f in $(shell echo $(APPS)) ; do cat apps/$$f/$(DCINC) >> $@ ; done

## старт контейнеров
up:
up: CMD=up -d $(APPS_SYS) $(shell echo $(APPS))
up: dc

## рестарт контейнеров
reup:
reup: CMD=up --force-recreate -d $(APPS_SYS) $(shell echo $(APPS))
reup: dc

## остановка и удаление всех контейнеров
down:
down: CMD=down
down: dc

# $$PWD используется для того, чтобы текущий каталог был доступен в контейнере по тому же пути
# и относительные тома новых контейнеров могли его использовать
## run docker-compose
dc: docker-compose.yml
	@echo "Running dc command: $(CMD)"
	@echo "Dcape URL: $(DCAPE_SCHEME)://$(DCAPE_HOST)"
	@docker run --rm -t -i \
	  -v /var/run/docker.sock:/var/run/docker.sock \
	  -v $$PWD:$$PWD -w $$PWD \
	  docker/compose:$(DC_VER) \
	  -p $$DCAPE_TAG \
	  $(CMD)

# ------------------------------------------------------------------------------

# Wait for postgresql container start
docker-wait:
	@echo -n "Checking PG is ready..." ; \
	until [[ `docker inspect -f "{{.State.Health.Status}}" $$PG_CONTAINER` == healthy ]] ; do sleep 1 ; echo -n "." ; done
	@echo "Ok"

# Database import script
# PG_CONTAINER_DUMP_DEST must be set in pg container

define IMPORT_SCRIPT
[[ "$$PG_CONTAINER_DUMP_DEST" ]] || { echo "PG_CONTAINER_DUMP_DEST not set. Exiting" ; exit 1 ; } ; \
DB_NAME="$$1" ; DB_USER="$$2" ; DB_PASS="$$3" ; DB_SOURCE="$$4" ; \
dbsrc=$$PG_CONTAINER_DUMP_DEST/$$DB_SOURCE.tgz ; \
if [ -f $$dbsrc ] ; then \
  echo "Dump file $$dbsrc found, restoring database..." ; \
  zcat $$dbsrc | PGPASSWORD=$$DB_PASS pg_restore -h localhost -U $$DB_USER -O -Ft -d $$DB_NAME || exit 1 ; \
else \
  echo "Dump file $$dbsrc not found" ; \
  exit 2 ; \
fi
endef
export IMPORT_SCRIPT

## create database and user
db-create: docker-wait
	@echo "*** $@ ***" \
	&& varname=$(NAME)_DB_PASS && pass=$${!varname} \
	&& varname=$(NAME)_DB_TAG && dbname=$${!varname} \
	&& docker exec -i $$PG_CONTAINER psql -U postgres -c "CREATE USER \"$$dbname\" WITH PASSWORD '$$pass';" 2> >(grep -v "already exists" >&2) \
	&& docker exec -i $$PG_CONTAINER psql -U postgres -c "CREATE DATABASE \"$$dbname\" OWNER \"$$dbname\";" 2> >(grep -v "already exists" >&2) || db_exists=1 ; \
	if [[ ! "$$db_exists" ]] && [[ "$(PG_SOURCE_SUFFIX)" ]] ; then \
	    echo "$$IMPORT_SCRIPT" | docker exec -i $$PG_CONTAINER bash -s - $$dbname $$dbname $$pass $$dbname$(PG_SOURCE_SUFFIX) \
	    && docker exec -i $$PG_CONTAINER psql -U postgres -c "COMMENT ON DATABASE \"$$dbname\" IS 'SOURCE $$dbname$(PG_SOURCE_SUFFIX)';" \
	    || true ; \
	fi

## drop database and user
db-drop:
	@echo "*** $@ ***" \
	&& varname=$(NAME)_DB_TAG && dbname=$${!varname} \
	&& docker exec -i $$PG_CONTAINER psql -U postgres -c "DROP DATABASE \"$$dbname\";" \
	&& docker exec -i $$PG_CONTAINER psql -U postgres -c "DROP USER \"$$dbname\";"

psql:
	@docker exec -it $$PG_CONTAINER psql -U postgres

## Run local psql, requires pg client installed
psql-local:
	@psql -h localhost -p $(PG_PORT_LOCAL)

# ------------------------------------------------------------------------------
# $(CFG) file store

## get env tag from store, `make env-get TAG=app--config--tag`
env-get:
	@[[ "$(TAG)" ]] || { echo "Error: Tag value required" ; exit 1 ;}
	@echo "Getting env into $(TAG)"
	@docker run --rm -ti --network $${DCAPE_NET} $${DCAPE_TAG}_drone-compose curl -gs $${ENFIST_URL}/tag_vars?code=$(TAG) \
	  | jq -r '.' > $(TAG).env

## list env tags in store
env-ls:
	@docker run --rm -ti --network $${DCAPE_NET} $${DCAPE_TAG}_drone-compose curl -gs $${ENFIST_URL}/tag \
	  | jq -r '.[] | .updated_at +"  "+.code'

## set env tag in store, `make env-set TAG=app--config--tag`
env-set:
	@[[ "$(TAG)" ]] || { echo "Error: Tag value required" ; exit 1 ;}
	@echo "Setting $(TAG) from file" \
	&& jq -R -sc ". | {\"code\":\"$(TAG)\",\"data\":.}" < $(TAG).env | \
	  docker run --rm -ti --network $${DCAPE_NET} $${DCAPE_TAG}_drone-compose curl -gsd @- $${ENFIST_URL}/tag_set > /dev/null

# ------------------------------------------------------------------------------

## delete unused docker images w/o name
clean-noname:
	docker rmi $$(docker images | grep "<none>" | awk "{print \$$3}")
#docker images -q -f dangling=true

## delete docker dangling volumes
clean-volume:
	docker volume rm $$(docker volume ls -qf dangling=true)

# ------------------------------------------------------------------------------

help:
	@grep -A 1 "^##" Makefile | less

##
## Press 'q' for exit
##
